@inline trim_ud(s::String) = ( (endswith(s,"u")||endswith(s,"d")) ? s[1:end-1] : s )

@inline trim_ud(s::Symbol) = Symbol(trim_ud(string(s)))

@inline trim_ud(s1::Symbol,s2::Symbol) = (trim_ud(s1),trim_ud(s2))

@inline getv(d::Dict,vec_key::Vector) = map(k->get(d,k,0.0),vec_key)




SlaterKosterDict = Dict(
(:s,:s)=>((l,m,n)->List(1.0)),
(:s,:px)=>((l,m,n)->List(l)),
(:s,:py)=>((l,m,n)->List(m)),
(:s,:pz)=>((l,m,n)->List(n)),
(:px,:s)=>((l,m,n)->List(l)),
(:py,:s)=>((l,m,n)->List(m)),
(:pz,:s)=>((l,m,n)->List(n)),
(:px,:px)=>((l,m,n)->List(1 - Power(m,2) - Power(n,2),Power(m,2) + Power(n,2))),
(:px,:py)=>((l,m,n)->List(l*m,-(l*m))),
(:px,:pz)=>((l,m,n)->List(l*n,-(l*n))),
(:py,:px)=>((l,m,n)->List(l*m,-(l*m))),
(:py,:py)=>((l,m,n)->List(Power(m,2),1 - Power(m,2))),
(:py,:pz)=>((l,m,n)->List(m*n,-(m*n))),
(:pz,:px)=>((l,m,n)->List(l*n,-(l*n))),
(:pz,:py)=>((l,m,n)->List(m*n,-(m*n))),
(:pz,:pz)=>((l,m,n)->List(Power(n,2),1 - Power(n,2))),
(:s,:dyz)=>((l,m,n)->List(Sqrt(3)*m*n)),
(:s,:dzx)=>((l,m,n)->List(Sqrt(3)*l*n)),
(:s,:dxy)=>((l,m,n)->List(Sqrt(3)*l*m)),
(:s,:dx2y2)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m))/2.)),
(:s,:d3zmr2)=>((l,m,n)->List((-1 + 3*Power(n,2))/2.)),
(:dyz,:s)=>((l,m,n)->List(Sqrt(3)*m*n)),
(:dzx,:s)=>((l,m,n)->List(Sqrt(3)*l*n)),
(:dxy,:s)=>((l,m,n)->List(Sqrt(3)*l*m)),
(:dx2y2,:s)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m))/2.)),
(:d3zmr2,:s)=>((l,m,n)->List((-1 + 3*Power(n,2))/2.)),
(:px,:dyz)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:px,:dzx)=>((l,m,n)->List(-(Sqrt(3)*n*(-1 + Power(m,2) + Power(n,2))),n*(-1 + 2*Power(m,2) + 2*Power(n,2)))),
(:px,:dxy)=>((l,m,n)->List(-(Sqrt(3)*m*(-1 + Power(m,2) + Power(n,2))),m*(-1 + 2*Power(m,2) + 2*Power(n,2)))),
(:px,:dx2y2)=>((l,m,n)->List((Sqrt(3)*l*(l - m)*(l + m))/2.,l*(2*Power(m,2) + Power(n,2)))),
(:px,:d3zmr2)=>((l,m,n)->List((l*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*l*Power(n,2)))),
(:py,:dyz)=>((l,m,n)->List(Sqrt(3)*Power(m,2)*n,n - 2*Power(m,2)*n)),
(:py,:dzx)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:py,:dxy)=>((l,m,n)->List(Sqrt(3)*l*Power(m,2),l - 2*l*Power(m,2))),
(:py,:dx2y2)=>((l,m,n)->List(-(Sqrt(3)*m*(-1 + 2*Power(m,2) + Power(n,2)))/2.,m*(-2 + 2*Power(m,2) + Power(n,2)))),
(:py,:d3zmr2)=>((l,m,n)->List((m*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*m*Power(n,2)))),
(:pz,:dyz)=>((l,m,n)->List(Sqrt(3)*m*Power(n,2),m - 2*m*Power(n,2))),
(:pz,:dzx)=>((l,m,n)->List(Sqrt(3)*l*Power(n,2),l - 2*l*Power(n,2))),
(:pz,:dxy)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:pz,:dx2y2)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m)*n)/2.,n*(-1 + 2*Power(m,2) + Power(n,2)))),
(:pz,:d3zmr2)=>((l,m,n)->List((n*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*n*(-1 + Power(n,2))))),
(:dyz,:px)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:dyz,:py)=>((l,m,n)->List(Sqrt(3)*Power(m,2)*n,n - 2*Power(m,2)*n)),
(:dyz,:pz)=>((l,m,n)->List(Sqrt(3)*m*Power(n,2),m - 2*m*Power(n,2))),
(:dzx,:px)=>((l,m,n)->List(-(Sqrt(3)*n*(-1 + Power(m,2) + Power(n,2))),n*(-1 + 2*Power(m,2) + 2*Power(n,2)))),
(:dzx,:py)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:dzx,:pz)=>((l,m,n)->List(Sqrt(3)*l*Power(n,2),l - 2*l*Power(n,2))),
(:dxy,:px)=>((l,m,n)->List(-(Sqrt(3)*m*(-1 + Power(m,2) + Power(n,2))),m*(-1 + 2*Power(m,2) + 2*Power(n,2)))),
(:dxy,:py)=>((l,m,n)->List(Sqrt(3)*l*Power(m,2),l - 2*l*Power(m,2))),
(:dxy,:pz)=>((l,m,n)->List(Sqrt(3)*l*m*n,-2*l*m*n)),
(:dx2y2,:px)=>((l,m,n)->List((Sqrt(3)*l*(l - m)*(l + m))/2.,l*(2*Power(m,2) + Power(n,2)))),
(:dx2y2,:py)=>((l,m,n)->List(-(Sqrt(3)*m*(-1 + 2*Power(m,2) + Power(n,2)))/2.,m*(-2 + 2*Power(m,2) + Power(n,2)))),
(:dx2y2,:pz)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m)*n)/2.,n*(-1 + 2*Power(m,2) + Power(n,2)))),
(:d3zmr2,:px)=>((l,m,n)->List((l*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*l*Power(n,2)))),
(:d3zmr2,:py)=>((l,m,n)->List((m*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*m*Power(n,2)))),
(:d3zmr2,:pz)=>((l,m,n)->List((n*(-1 + 3*Power(n,2)))/2.,-(Sqrt(3)*n*(-1 + Power(n,2))))),
(:dyz,:dyz)=>((l,m,n)->List(3*Power(m,2)*Power(n,2),Power(n,2) + Power(m,2)*(1 - 4*Power(n,2)),(-1 + Power(m,2))*(-1 + Power(n,2)))),
(:dyz,:dzx)=>((l,m,n)->List(3*l*m*Power(n,2),l*m*(1 - 4*Power(n,2)),l*m*(-1 + Power(n,2)))),
(:dyz,:dxy)=>((l,m,n)->List(3*l*Power(m,2)*n,l*(1 - 4*Power(m,2))*n,l*(-1 + Power(m,2))*n)),
(:dyz,:dx2y2)=>((l,m,n)->List((3*(l - m)*m*(l + m)*n)/2.,(m*n*(3 - (3 + 2*Power(l,2))*Power(n,2) + 2*Power(m,2)*(-2 + Power(n,2))))/(-1 + Power(n,2)),-(m*n*(-3 + 2*Power(m,2) + Power(n,2)))/2.)),
(:dyz,:d3zmr2)=>((l,m,n)->List((Sqrt(3)*m*n*(-1 + 3*Power(n,2)))/2.,Sqrt(3)*m*n*(1 - 2*Power(n,2)),(Sqrt(3)*m*n*(-1 + Power(n,2)))/2.)),
(:dzx,:dyz)=>((l,m,n)->List(3*l*m*Power(n,2),l*m*(1 - 4*Power(n,2)),l*m*(-1 + Power(n,2)))),
(:dzx,:dzx)=>((l,m,n)->List(-3*Power(n,2)*(-1 + Power(m,2) + Power(n,2)),Power(1 - 2*Power(n,2),2) + Power(m,2)*(-1 + 4*Power(n,2)),-((-1 + Power(n,2))*(Power(m,2) + Power(n,2))))),
(:dzx,:dxy)=>((l,m,n)->List(-3*m*n*(-1 + Power(m,2) + Power(n,2)),m*n*(-3 + 4*Power(m,2) + 4*Power(n,2)),-(m*n*(Power(m,2) + Power(n,2))))),
(:dzx,:dx2y2)=>((l,m,n)->List((3*l*(l - m)*(l + m)*n)/2.,l*n*(-1 + 4*Power(m,2) + 2*Power(n,2)),-(l*n*(1 + 2*Power(m,2) + Power(n,2)))/2.)),
(:dzx,:d3zmr2)=>((l,m,n)->List((Sqrt(3)*l*n*(-1 + 3*Power(n,2)))/2.,Sqrt(3)*l*n*(1 - 2*Power(n,2)),(Sqrt(3)*l*n*(-1 + Power(n,2)))/2.)),
(:dxy,:dyz)=>((l,m,n)->List(3*l*Power(m,2)*n,l*(1 - 4*Power(m,2))*n,l*(-1 + Power(m,2))*n)),
(:dxy,:dzx)=>((l,m,n)->List(-3*m*n*(-1 + Power(m,2) + Power(n,2)),m*n*(-3 + 4*Power(m,2) + 4*Power(n,2)),-(m*n*(Power(m,2) + Power(n,2))))),
(:dxy,:dxy)=>((l,m,n)->List(-3*Power(m,2)*(-1 + Power(m,2) + Power(n,2)),1 - Power(n,2) + 4*Power(m,2)*(-1 + Power(m,2) + Power(n,2)),-((-1 + Power(m,2))*(Power(m,2) + Power(n,2))))),
(:dxy,:dx2y2)=>((l,m,n)->List((3*l*(l - m)*m*(l + m))/2.,2*l*m*(-1 + 2*Power(m,2) + Power(n,2)),(l*(l - m)*m*(l + m))/2.)),
(:dxy,:d3zmr2)=>((l,m,n)->List((Sqrt(3)*l*m*(-1 + 3*Power(n,2)))/2.,-2*Sqrt(3)*l*m*Power(n,2),(Sqrt(3)*l*m*(1 + Power(n,2)))/2.)),
(:dx2y2,:dyz)=>((l,m,n)->List((3*(l - m)*m*(l + m)*n)/2.,(m*n*(3 - (3 + 2*Power(l,2))*Power(n,2) + 2*Power(m,2)*(-2 + Power(n,2))))/(-1 + Power(n,2)),-(m*n*(-3 + 2*Power(m,2) + Power(n,2)))/2.)),
(:dx2y2,:dzx)=>((l,m,n)->List((3*l*(l - m)*(l + m)*n)/2.,l*n*(-1 + 4*Power(m,2) + 2*Power(n,2)),-(l*n*(1 + 2*Power(m,2) + Power(n,2)))/2.)),
(:dx2y2,:dxy)=>((l,m,n)->List((3*l*(l - m)*m*(l + m))/2.,2*l*m*(-1 + 2*Power(m,2) + Power(n,2)),(l*(l - m)*m*(l + m))/2.)),
(:dx2y2,:dx2y2)=>((l,m,n)->List((3*Power(-1 + 2*Power(m,2) + Power(n,2),2))/4.,-4*Power(m,4) + Power(n,2) - Power(n,4) - 4*Power(m,2)*(-1 + Power(n,2)),Power(m,4) + Power(m,2)*(-1 + Power(n,2)) + Power(1 + Power(n,2),2)/4.)),
(:dx2y2,:d3zmr2)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m)*(-1 + 3*Power(n,2)))/4.,Sqrt(3)*Power(n,2)*(-1 + 2*Power(m,2) + Power(n,2)),(Sqrt(3)*(l - m)*(l + m)*(1 + Power(n,2)))/4.)),
(:d3zmr2,:dyz)=>((l,m,n)->List((Sqrt(3)*m*n*(-1 + 3*Power(n,2)))/2.,Sqrt(3)*m*n*(1 - 2*Power(n,2)),(Sqrt(3)*m*n*(-1 + Power(n,2)))/2.)),
(:d3zmr2,:dzx)=>((l,m,n)->List((Sqrt(3)*l*n*(-1 + 3*Power(n,2)))/2.,Sqrt(3)*l*n*(1 - 2*Power(n,2)),(Sqrt(3)*l*n*(-1 + Power(n,2)))/2.)),
(:d3zmr2,:dxy)=>((l,m,n)->List((Sqrt(3)*l*m*(-1 + 3*Power(n,2)))/2.,-2*Sqrt(3)*l*m*Power(n,2),(Sqrt(3)*l*m*(1 + Power(n,2)))/2.)),
(:d3zmr2,:dx2y2)=>((l,m,n)->List((Sqrt(3)*(l - m)*(l + m)*(-1 + 3*Power(n,2)))/4.,Sqrt(3)*Power(n,2)*(-1 + 2*Power(m,2) + Power(n,2)),(Sqrt(3)*(l - m)*(l + m)*(1 + Power(n,2)))/4.)),
(:d3zmr2,:d3zmr2)=>((l,m,n)->List(Power(1 - 3*Power(n,2),2)/4.,-3*Power(n,2)*(-1 + Power(n,2)),(3*Power(-1 + Power(n,2),2))/4.))
)


SlaterKosterIntegralNames = Dict(
(:s,:s)=>[:Vssσ,],
(:s,:px)=>[:Vspσ,],
(:s,:py)=>[:Vspσ,],
(:s,:pz)=>[:Vspσ,],
(:px,:s)=>[:Vpsσ,],
(:py,:s)=>[:Vpsσ,],
(:pz,:s)=>[:Vpsσ,],
(:px,:px)=>[:Vppσ,:Vppπ],
(:px,:py)=>[:Vppσ,:Vppπ],
(:px,:pz)=>[:Vppσ,:Vppπ],
(:py,:px)=>[:Vppσ,:Vppπ],
(:py,:py)=>[:Vppσ,:Vppπ],
(:py,:pz)=>[:Vppσ,:Vppπ],
(:pz,:px)=>[:Vppσ,:Vppπ],
(:pz,:py)=>[:Vppσ,:Vppπ],
(:pz,:pz)=>[:Vppσ,:Vppπ],
(:s,:dyz)=>[:Vsdσ,],
(:s,:dzx)=>[:Vsdσ,],
(:s,:dxy)=>[:Vsdσ,],
(:s,:dx2y2)=>[:Vsdσ,],
(:s,:d3zmr2)=>[:Vsdσ,],
(:dyz,:s)=>[:Vdsσ,],
(:dzx,:s)=>[:Vdsσ,],
(:dxy,:s)=>[:Vdsσ,],
(:dx2y2,:s)=>[:Vdsσ,],
(:d3zmr2,:s)=>[:Vdsσ,],
(:px,:dyz)=>[:Vpdσ,:Vpdπ],
(:px,:dzx)=>[:Vpdσ,:Vpdπ],
(:px,:dxy)=>[:Vpdσ,:Vpdπ],
(:px,:dx2y2)=>[:Vpdσ,:Vpdπ],
(:px,:d3zmr2)=>[:Vpdσ,:Vpdπ],
(:py,:dyz)=>[:Vpdσ,:Vpdπ],
(:py,:dzx)=>[:Vpdσ,:Vpdπ],
(:py,:dxy)=>[:Vpdσ,:Vpdπ],
(:py,:dx2y2)=>[:Vpdσ,:Vpdπ],
(:py,:d3zmr2)=>[:Vpdσ,:Vpdπ],
(:pz,:dyz)=>[:Vpdσ,:Vpdπ],
(:pz,:dzx)=>[:Vpdσ,:Vpdπ],
(:pz,:dxy)=>[:Vpdσ,:Vpdπ],
(:pz,:dx2y2)=>[:Vpdσ,:Vpdπ],
(:pz,:d3zmr2)=>[:Vpdσ,:Vpdπ],
(:dyz,:px)=>[:Vdpσ,:Vdpπ],
(:dyz,:py)=>[:Vdpσ,:Vdpπ],
(:dyz,:pz)=>[:Vdpσ,:Vdpπ],
(:dzx,:px)=>[:Vdpσ,:Vdpπ],
(:dzx,:py)=>[:Vdpσ,:Vdpπ],
(:dzx,:pz)=>[:Vdpσ,:Vdpπ],
(:dxy,:px)=>[:Vdpσ,:Vdpπ],
(:dxy,:py)=>[:Vdpσ,:Vdpπ],
(:dxy,:pz)=>[:Vdpσ,:Vdpπ],
(:dx2y2,:px)=>[:Vdpσ,:Vdpπ],
(:dx2y2,:py)=>[:Vdpσ,:Vdpπ],
(:dx2y2,:pz)=>[:Vdpσ,:Vdpπ],
(:d3zmr2,:px)=>[:Vdpσ,:Vdpπ],
(:d3zmr2,:py)=>[:Vdpσ,:Vdpπ],
(:d3zmr2,:pz)=>[:Vdpσ,:Vdpπ],
(:dyz,:dyz)=>[:Vddσ,:Vddπ,:Vddδ],
(:dyz,:dzx)=>[:Vddσ,:Vddπ,:Vddδ],
(:dyz,:dxy)=>[:Vddσ,:Vddπ,:Vddδ],
(:dyz,:dx2y2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dyz,:d3zmr2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dzx,:dyz)=>[:Vddσ,:Vddπ,:Vddδ],
(:dzx,:dzx)=>[:Vddσ,:Vddπ,:Vddδ],
(:dzx,:dxy)=>[:Vddσ,:Vddπ,:Vddδ],
(:dzx,:dx2y2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dzx,:d3zmr2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dxy,:dyz)=>[:Vddσ,:Vddπ,:Vddδ],
(:dxy,:dzx)=>[:Vddσ,:Vddπ,:Vddδ],
(:dxy,:dxy)=>[:Vddσ,:Vddπ,:Vddδ],
(:dxy,:dx2y2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dxy,:d3zmr2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dx2y2,:dyz)=>[:Vddσ,:Vddπ,:Vddδ],
(:dx2y2,:dzx)=>[:Vddσ,:Vddπ,:Vddδ],
(:dx2y2,:dxy)=>[:Vddσ,:Vddπ,:Vddδ],
(:dx2y2,:dx2y2)=>[:Vddσ,:Vddπ,:Vddδ],
(:dx2y2,:d3zmr2)=>[:Vddσ,:Vddπ,:Vddδ],
(:d3zmr2,:dyz)=>[:Vddσ,:Vddπ,:Vddδ],
(:d3zmr2,:dzx)=>[:Vddσ,:Vddπ,:Vddδ],
(:d3zmr2,:dxy)=>[:Vddσ,:Vddπ,:Vddδ],
(:d3zmr2,:dx2y2)=>[:Vddσ,:Vddπ,:Vddδ],
(:d3zmr2,:d3zmr2)=>[:Vddσ,:Vddπ,:Vddδ]
)


#using LinearAlgebra
#SlaterKosterDict[(:d3zmr2,:d3zmr2)](normalize(rand(3))...)
#SlaterKosterIntegralNames[((:d3zmr2,:d3zmr2))]

